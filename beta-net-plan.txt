(0 e 0 (a ?s stage-value duplicate) r-reverse-edges)
(1 i 1 (a ?l line-p2 ?p2))
(2 x 2 (a ?l line-p1 ?p1) r-reverse-edges 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: reverse-edges p1 " ?p1 " p2 " ?p2)) (#'rete.core/asser (#'clojure.core/gensym "edge") edge-p2 ?p2 edge-p1 ?p1 edge-joined nil) (#'rete.core/asser (#'clojure.core/gensym "edge") edge-p2 ?p1 edge-p1 ?p2 edge-joined nil) (#'rete.core/retract ?l line-p2 ?p2 line-p1 ?p1)))
(3 e 0 (a ?s stage-value duplicate) r-done-reversing)
(4 x nil (f true not (#'rete.core/exist ?l line-p2 ?p2 line-p1 ?p1)) r-done-reversing -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-reversing")) (#'rete.core/retract ?s stage-value duplicate) (#'rete.core/asser ?s stage-value detect-junctions)))
(5 e 3 (a ?s stage-value detect-junctions) r-make-3-junction)
(6 i 4 (a ?e1 edge-joined ?v2357))
(7 i 5 (a ?e1 edge-p1 ?base-point))
(8 i 6 (a ?e1 edge-p2 ?p1))
(9 i 4 (a ?e2 edge-joined ?v2358))
(10 i 5 (a ?e2 edge-p1 ?base-point))
(11 i 6 (a ?e2 edge-p2 ?p2))
(12 i 7 (f ?p1 != ?p2))
(13 i 4 (a ?e3 edge-joined ?v2359))
(14 i 5 (a ?e3 edge-p1 ?base-point))
(15 i 6 (a ?e3 edge-p2 ?p3))
(16 i 7 (f ?p1 != ?p3))
(17 x 7 (f ?p2 != ?p3) r-make-3-junction 10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: make-3-junction bp " ?base-point " p1 " ?p1 " p2 " ?p2 " p3 " ?p3)) (#'wz/make-3-junction ?base-point ?p1 ?p2 ?p3) (#'rete.core/retract ?e1 edge-joined ?v2357) (#'rete.core/asser ?e1 edge-joined nil) (#'rete.core/retract ?e2 edge-joined ?v2358) (#'rete.core/asser ?e2 edge-joined nil) (#'rete.core/retract ?e3 edge-joined ?v2359) (#'rete.core/asser ?e3 edge-joined nil)))
(18 e 3 (a ?s stage-value detect-junctions) r-make-L)
(19 i 4 (a ?e1 edge-joined ?v2360))
(20 i 5 (a ?e1 edge-p1 ?base-point))
(21 i 6 (a ?e1 edge-p2 ?p2))
(22 i 4 (a ?e2 edge-joined ?v2361))
(23 i 5 (a ?e2 edge-p1 ?base-point))
(24 i 6 (a ?e2 edge-p2 ?p3))
(25 i 7 (f ?p3 != ?p2))
(26 x nil (f true not (#'rete.core/exist ?e3 edge-p2 ?p4 edge-p1 ?base-point)) r-make-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: make-L")) (#'rete.core/asser (#'clojure.core/gensym "junction") junction-type L junction-p2 ?p3 junction-base-point ?base-point junction-p1 ?p2) (#'rete.core/retract ?e1 edge-joined ?v2360) (#'rete.core/asser ?e1 edge-joined nil) (#'rete.core/retract ?e2 edge-joined ?v2361) (#'rete.core/asser ?e2 edge-joined nil)))
(27 e 3 (a ?s stage-value detect-junctions) r-done-detecting)
(28 x nil (f true not (#'rete.core/exist ?e edge-joined false)) r-done-detecting -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-detecting")) (#'rete.core/retract ?s stage-value detect-junctions) (#'rete.core/asser ?s stage-value find-initial-boundary)))
(29 e 9 (a ?s stage-value find-initial-boundary) r1-initial-boundary-junction-L)
(30 i 10 (a ?j junction-type L))
(31 i 11 (a ?j junction-p2 ?p2))
(32 i 12 (a ?j junction-base-point ?base-point))
(33 i 13 (a ?j junction-p1 ?p1))
(34 i 14 (a ?e1 edge-label ?v2362))
(35 i 5 (a ?e1 edge-p1 ?base-point))
(36 i 6 (a ?e1 edge-p2 ?p1))
(37 i 14 (a ?e2 edge-label ?v2363))
(38 i 5 (a ?e2 edge-p1 ?base-point))
(39 i 6 (a ?e2 edge-p2 ?p2))
(40 x nil (f true not (#'rete.core/exist ?x junction-base-point ?bp)) r1-initial-boundary-junction-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 1-initial-boundary-junction-L")) (#'rete.core/retract ?e1 edge-label ?v2362) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2363) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s srage-value find-second-boundary)))
(41 e 9 (a ?s stage-value find-initial-boundary) r2-initial-boundary-junction-L)
(42 i 10 (a ?j junction-type L))
(43 i 11 (a ?j junction-p2 ?p2))
(44 i 12 (a ?j junction-base-point ?base-point))
(45 i 13 (a ?j junction-p1 ?p1))
(46 i 14 (a ?e1 edge-label ?v2364))
(47 i 5 (a ?e1 edge-p1 ?base-point))
(48 i 6 (a ?e1 edge-p2 ?p1))
(49 i 14 (a ?e2 edge-label ?v2365))
(50 i 5 (a ?e2 edge-p1 ?base-point))
(51 i 6 (a ?e2 edge-p2 ?p2))
(52 i 12 (a ?x junction-base-point ?bp))
(53 x nil (f ?bp <= ?base-point) r2-initial-boundary-junction-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 2-initial-boundary-junction-L")) (#'rete.core/retract ?e1 edge-label ?v2364) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2365) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s srage-value find-second-boundary)))
(54 e 9 (a ?s stage-value find-initial-boundary) r1-initial-boundary-junction-arrow)
(55 i 15 (a ?j junction-type arrow))
(56 i 11 (a ?j junction-p2 ?p2))
(57 i 12 (a ?j junction-base-point ?bp))
(58 i 16 (a ?j junction-p3 ?p3))
(59 i 13 (a ?j junction-p1 ?p1))
(60 i 14 (a ?e1 edge-label ?v2366))
(61 i 5 (a ?e1 edge-p1 ?bp))
(62 i 6 (a ?e1 edge-p2 ?p1))
(63 i 14 (a ?e2 edge-label ?v2367))
(64 i 5 (a ?e2 edge-p1 ?bp))
(65 i 6 (a ?e2 edge-p2 ?p2))
(66 i 14 (a ?e3 edge-label ?v2368))
(67 i 5 (a ?e3 edge-p1 ?bp))
(68 i 6 (a ?e3 edge-p2 ?p3))
(69 x nil (f true not (#'rete.core/exist ?x junction-base-point ?base-point)) r1-initial-boundary-junction-arrow 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 1-initial-boundary-junction-arrow")) (#'rete.core/retract ?e1 edge-label ?v2366) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2367) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s stage-value find-second-boundary)))
(70 e 9 (a ?s stage-value find-initial-boundary) r2-initial-boundary-junction-arrow)
(71 i 15 (a ?j junction-type arrow))
(72 i 11 (a ?j junction-p2 ?p2))
(73 i 12 (a ?j junction-base-point ?bp))
(74 i 16 (a ?j junction-p3 ?p3))
(75 i 13 (a ?j junction-p1 ?p1))
(76 i 14 (a ?e1 edge-label ?v2369))
(77 i 5 (a ?e1 edge-p1 ?bp))
(78 i 6 (a ?e1 edge-p2 ?p1))
(79 i 14 (a ?e2 edge-label ?v2370))
(80 i 5 (a ?e2 edge-p1 ?bp))
(81 i 6 (a ?e2 edge-p2 ?p2))
(82 i 14 (a ?e3 edge-label ?v2371))
(83 i 5 (a ?e3 edge-p1 ?bp))
(84 i 6 (a ?e3 edge-p2 ?p3))
(85 i 12 (a ?x junction-base-point ?base-point))
(86 x nil (f ?base-point <= ?bp) r2-initial-boundary-junction-arrow 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 2-initial-boundary-junction-arrow")) (#'rete.core/retract ?e1 edge-label ?v2369) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2370) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s stage-value find-second-boundary)))
(87 e 17 (a ?s stage-value find-second-boundary) r1-second-boundary-junction-L)
(88 i 10 (a ?j junction-type L))
(89 i 11 (a ?j junction-p2 ?p2))
(90 i 12 (a ?j junction-base-point ?base-point))
(91 i 13 (a ?j junction-p1 ?p1))
(92 i 14 (a ?e1 edge-label ?v2372))
(93 i 5 (a ?e1 edge-p1 ?base-point))
(94 i 6 (a ?e1 edge-p2 ?p1))
(95 i 14 (a ?e2 edge-label ?v2373))
(96 i 5 (a ?e2 edge-p1 ?base-point))
(97 i 6 (a ?e2 edge-p2 ?p2))
(98 x nil (f true not (#'rete.core/exist ?x junction-base-point ?bp)) r1-second-boundary-junction-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 1-second-boundary-junction-L")) (#'rete.core/retract ?e1 edge-label ?v2372) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2373) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(99 e 17 (a ?s stage-value find-second-boundary) r2-second-boundary-junction-L)
(100 i 10 (a ?j junction-type L))
(101 i 11 (a ?j junction-p2 ?p2))
(102 i 12 (a ?j junction-base-point ?base-point))
(103 i 13 (a ?j junction-p1 ?p1))
(104 i 14 (a ?e1 edge-label ?v2374))
(105 i 5 (a ?e1 edge-p1 ?base-point))
(106 i 6 (a ?e1 edge-p2 ?p1))
(107 i 14 (a ?e2 edge-label ?v2375))
(108 i 5 (a ?e2 edge-p1 ?base-point))
(109 i 6 (a ?e2 edge-p2 ?p2))
(110 i 12 (a ?x junction-base-point ?bp))
(111 x nil (f ?bp >= ?base-point) r2-second-boundary-junction-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 2-second-boundary-junction-L")) (#'rete.core/retract ?e1 edge-label ?v2374) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2375) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(112 e 17 (a ?s stage-value find-second-boundary) r1-second-boundary-junction-arrow)
(113 i 15 (a ?j junction-type arrow))
(114 i 11 (a ?j junction-p2 ?p2))
(115 i 12 (a ?j junction-base-point ?bp))
(116 i 16 (a ?j junction-p3 ?p3))
(117 i 13 (a ?j junction-p1 ?p1))
(118 i 14 (a ?e1 edge-label ?v2376))
(119 i 5 (a ?e1 edge-p1 ?bp))
(120 i 6 (a ?e1 edge-p2 ?p1))
(121 i 14 (a ?e2 edge-label ?v2377))
(122 i 5 (a ?e2 edge-p1 ?bp))
(123 i 6 (a ?e2 edge-p2 ?p2))
(124 i 14 (a ?e3 edge-label ?v2378))
(125 i 5 (a ?e3 edge-p1 ?bp))
(126 i 6 (a ?e3 edge-p2 ?p3))
(127 x nil (f true not (#'rete.core/exist ?x junction-base-point ?base-point)) r1-second-boundary-junction-arrow 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 1-second-boundary-junction-arrow")) (#'rete.core/retract ?e1 edge-label ?v2376) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2377) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(128 e 17 (a ?s stage-value find-second-boundary) r2-second-boundary-junction-arrow)
(129 i 15 (a ?j junction-type arrow))
(130 i 11 (a ?j junction-p2 ?p2))
(131 i 12 (a ?j junction-base-point ?bp))
(132 i 16 (a ?j junction-p3 ?p3))
(133 i 13 (a ?j junction-p1 ?p1))
(134 i 14 (a ?e1 edge-label ?v2379))
(135 i 5 (a ?e1 edge-p1 ?bp))
(136 i 6 (a ?e1 edge-p2 ?p1))
(137 i 14 (a ?e2 edge-label ?v2380))
(138 i 5 (a ?e2 edge-p1 ?bp))
(139 i 6 (a ?e2 edge-p2 ?p2))
(140 i 14 (a ?e3 edge-label ?v2381))
(141 i 5 (a ?e3 edge-p1 ?bp))
(142 i 6 (a ?e3 edge-p2 ?p3))
(143 i 12 (a ?x junction-base-point ?base-point))
(144 x nil (f ?base-point >= ?bp) r2-second-boundary-junction-arrow 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 2-second-boundary-junction-arrow")) (#'rete.core/retract ?e1 edge-label ?v2379) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2380) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(145 e 18 (a ?s stage-value labeling) r-match-edge)
(146 i 19 (a ?e1 edge-plotted ?v2382))
(147 i 14 (a ?e1 edge-label ?))
(148 i 5 (a ?e1 edge-p1 ?p1))
(149 i 6 (a ?e1 edge-p2 ?p2))
(150 i nil (f (#'wz/or3 (#'clojure.core/= ?l PLUS) (#'clojure.core/= ?l MINUS) (#'clojure.core/= ?l B)) = true))
(151 i 19 (a ?e2 edge-plotted ?v2383))
(152 i 14 (a ?e2 edge-label ?v2384))
(153 i 5 (a ?e2 edge-p1 ?p2))
(154 x 6 (a ?e2 edge-p2 ?p1) r-match-edge 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: match-edge")) (#'rete.core/retract ?e1 edge-plotted ?v2382) (#'rete.core/asser ?e1 edge-plotted t) (#'rete.core/retract ?e2 edge-label ?v2384 edge-plotted ?v2383) (#'rete.core/asser ?e2 edge-plotted t edge-label ?l)))
(155 e 18 (a ?s stage-value labeling) r-label-L)
(156 i 10 (a ?j junction-type L))
(157 i 12 (a ?j junction-base-point ?p1))
(158 i 6 (a ?e1 edge-p2 ?p2))
(159 i 5 (a ?e1 edge-p1 ?p1))
(160 i 14 (a ?e1 edge-label ?l))
(161 i nil (f (#'wz/or2 (#'clojure.core/= ?l PLUS) (#'clojure.core/= ?l MINUS)) = true))
(162 i 14 (a ?e2 edge-label ?v2385))
(163 i 5 (a ?e2 edge-p1 ?p1))
(164 i 6 (a ?e2 edge-p2 ?p3))
(165 x 7 (f ?p3 != ?p2) r-label-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-L")) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label B)))
(166 e 18 (a ?s stage-value labeling) r-label-tee-A)
(167 i 20 (a ?j junction-type tee))
(168 i 11 (a ?j junction-p2 ?p2))
(169 i 12 (a ?j junction-base-point ?bp))
(170 i 16 (a ?j junction-p3 ?p3))
(171 i 13 (a ?j junction-p1 ?p1))
(172 i 14 (a ?e1 edge-label ?v2386))
(173 i 5 (a ?e1 edge-p1 ?bp))
(174 i 6 (a ?e1 edge-p2 ?p1))
(175 i 14 (a ?e2 edge-label ?v2387))
(176 i 5 (a ?e2 edge-p1 ?bp))
(177 x 6 (a ?e2 edge-p2 ?p3) r-label-tee-A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-tee-A")) (#'rete.core/retract ?e1 edge-label ?v2386) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2387) (#'rete.core/asser ?e2 edge-label B)))
(178 e 18 (a ?s stage-value labeling) r-label-tee-B)
(179 i 20 (a ?j junction-type tee))
(180 i 11 (a ?j junction-p2 ?p2))
(181 i 12 (a ?j junction-base-point ?bp))
(182 i 16 (a ?j junction-p3 ?p3))
(183 i 13 (a ?j junction-p1 ?p1))
(184 i 14 (a ?e1 edge-label ?v2388))
(185 i 5 (a ?e1 edge-p1 ?bp))
(186 i 6 (a ?e1 edge-p2 ?p1))
(187 i 14 (a ?e2 edge-label ?v2389))
(188 i 5 (a ?e2 edge-p1 ?bp))
(189 x 6 (a ?e2 edge-p2 ?p3) r-label-tee-B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-tee-B")) (#'rete.core/retract ?e1 edge-label ?v2388) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v2389) (#'rete.core/asser ?e2 edge-label B)))
(190 e 18 (a ?s stage-value labeling) r-label-fork-1)
(191 i 21 (a ?j junction-type fork))
(192 i 12 (a ?j junction-base-point ?bp))
(193 i 6 (a ?e1 edge-p2 ?p1))
(194 i 5 (a ?e1 edge-p1 ?bp))
(195 i 22 (a ?e1 edge-label PLUS))
(196 i 14 (a ?e2 edge-label ?v2390))
(197 i 5 (a ?e2 edge-p1 ?bp))
(198 i 6 (a ?e2 edge-p2 ?p2))
(199 i 7 (f ?p2 != ?p1))
(200 i 14 (a ?e3 edge-label ?v2391))
(201 i 5 (a ?e3 edge-p1 ?bp))
(202 i 6 (a ?e3 edge-p2 ?p3))
(203 i 7 (f ?p3 != ?p2))
(204 x 7 (f ?p3 != ?p1) r-label-fork-1 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-fork-1")) (#'rete.core/retract ?e2 edge-label ?v2390) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(205 e 18 (a ?s stage-value labeling) r-label-fork-2)
(206 i 21 (a ?j junction-type fork))
(207 i 12 (a ?j junction-base-point ?bp))
(208 i 6 (a ?e1 edge-p2 ?p1))
(209 i 5 (a ?e1 edge-p1 ?bp))
(210 i 23 (a ?e1 edge-label B))
(211 i 6 (a ?e2 edge-p2 ?p2))
(212 i 5 (a ?e2 edge-p1 ?bp))
(213 i 24 (a ?e2 edge-label MINUS))
(214 i 7 (f ?p2 != ?p1))
(215 i 14 (a ?e3 edge-label ?v2392))
(216 i 5 (a ?e3 edge-p1 ?bp))
(217 i 6 (a ?e3 edge-p2 ?p3))
(218 i 7 (f ?p3 != ?p2))
(219 x 7 (f ?p3 != ?p1) r-label-fork-2 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-fork-2")) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label B)))
(220 e 18 (a ?s stage-value labeling) r-label-fork-3)
(221 i 21 (a ?j junction-type fork))
(222 i 12 (a ?j junction-base-point ?bp))
(223 i 6 (a ?e edge-p2 ?p1))
(224 i 5 (a ?e edge-p1 ?bp))
(225 i 23 (a ?e edge-label B))
(226 i 6 (a ?e edge-p2 ?p2))
(227 i 5 (a ?e edge-p1 ?bp))
(228 i 23 (a ?e edge-label B))
(229 i 7 (f ?p2 != ?p1))
(230 i 6 (a ?e edge-p2 ?p3))
(231 i 5 (a ?e edge-p1 ?bp))
(232 i 25 (a ?e edge-label nil))
(233 i 7 (f ?p3 != ?p2))
(234 x 7 (f ?p3 != ?p1) r-label-fork-3 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-fork-3")) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label MINUS)))
(235 e 18 (a ?s stage-value labeling) r-label-fork-4)
(236 i 21 (a ?j junction-type fork))
(237 i 12 (a ?j junction-base-point ?bp))
(238 i 6 (a ?e1 edge-p2 ?p1))
(239 i 5 (a ?e1 edge-p1 ?bp))
(240 i 24 (a ?e1 edge-label MINUS))
(241 i 6 (a ?e2 edge-p2 ?p2))
(242 i 5 (a ?e2 edge-p1 ?bp))
(243 i 24 (a ?e2 edge-label MINUS))
(244 i 7 (f ?p2 != ?p1))
(245 i 14 (a ?e3 edge-label ?v2393))
(246 i 5 (a ?e3 edge-p1 ?bp))
(247 i 6 (a ?e3 edge-p2 ?p3))
(248 i 7 (f ?p3 != ?p2))
(249 x 7 (f ?p3 != ?p1) r-label-fork-4 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-fork-4")) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label MINUS)))
(250 e 18 (a ?s stage-value labeling) r-label-arrow-1A)
(251 i 15 (a ?j junction-type arrow))
(252 i 11 (a ?j junction-p2 ?p2))
(253 i 12 (a ?j junction-base-point ?bp))
(254 i 16 (a ?j junction-p3 ?p3))
(255 i 13 (a ?j junction-p1 ?p1))
(256 i 6 (a ?e1 edge-p2 ?p1))
(257 i 5 (a ?e1 edge-p1 ?bp))
(258 i 14 (a ?e1 edge-label ?l))
(259 i nil (f (#'wz/or2 (#'clojure.core/= ?l B) (#'clojure.core/= ?l MINUS)) = true))
(260 i 14 (a ?e2 edge-label ?v2394))
(261 i 5 (a ?e2 edge-p1 ?bp))
(262 i 6 (a ?e2 edge-p2 ?p2))
(263 i 14 (a ?e3 edge-label ?v2395))
(264 i 5 (a ?e3 edge-p1 ?bp))
(265 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-1A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-1A")) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label ?l)))
(266 e 18 (a ?s stage-value labeling) r-label-arrow-1B)
(267 i 15 (a ?j junction-type arrow))
(268 i 11 (a ?j junction-p2 ?p2))
(269 i 12 (a ?j junction-base-point ?bp))
(270 i 16 (a ?j junction-p3 ?p3))
(271 i 13 (a ?j junction-p1 ?p1))
(272 i 6 (a ?e edge-p2 ?p1))
(273 i 5 (a ?e edge-p1 ?bp))
(274 i 14 (a ?e edge-label ?l))
(275 i nil (f (#'wz/or2 (#'clojure.core/= ? B) (#'clojure.core/= ?l MINUS)) = true))
(276 i 14 (a ?e1 edge-label ?v2396))
(277 i 5 (a ?e1 edge-p1 ?bp))
(278 i 6 (a ?e1 edge-p2 ?p2))
(279 i 14 (a ?e2 edge-label ?v2397))
(280 i 5 (a ?e2 edge-p1 ?bp))
(281 x 6 (a ?e2 edge-p2 ?p3) r-label-arrow-1B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-1B")) (#'rete.core/retract ?e1) (#'rete.core/asser ?e1 edge-label PLUS) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label ?l)))
(282 e 18 (a ?s stage-value labeling) r-label-arrow-2A)
(283 i 15 (a ?j junction-type arrow))
(284 i 11 (a ?j junction-p2 ?p2))
(285 i 12 (a ?j junction-base-point ?bp))
(286 i 16 (a ?j junction-p3 ?p3))
(287 i 13 (a ?j junction-p1 ?p1))
(288 i 6 (a ?e edge-p2 ?p3))
(289 i 5 (a ?e edge-p1 ?bp))
(290 i 14 (a ?e edge-label ?l))
(291 i nil (f (#'wz/or2 (#'clojure.core/= ? B) (#'clojure.core/= ?l MINUS)) = true))
(292 i 14 (a ?e1 edge-label ?v2398))
(293 i 5 (a ?e1 edge-p1 ?bp))
(294 i 6 (a ?e1 edge-p2 ?p2))
(295 i 14 (a ?e2 edge-label ?v2399))
(296 i 5 (a ?e2 edge-p1 ?bp))
(297 x 6 (a ?e2 edge-p2 ?p1) r-label-arrow-2A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-2A")) (#'rete.core/retract ?e1) (#'rete.core/asser ?e1 edge-label PLUS) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label ?l)))
(298 e 18 (a ?s stage-value labeling) r-label-arrow-2B)
(299 i 15 (a ?j junction-type arrow))
(300 i 11 (a ?j junction-p2 ?p2))
(301 i 12 (a ?j junction-base-point ?bp))
(302 i 16 (a ?j junction-p3 ?p3))
(303 i 13 (a ?j junction-p1 ?p1))
(304 i 6 (a ?e edge-p2 ?p3))
(305 i 5 (a ?e edge-p1 ?bp))
(306 i 14 (a ?e edge-label ?l))
(307 i nil (f (#'wz/or2 (#'clojure.core/= ? B) (#'clojure.core/= ?l MINUS)) = true))
(308 i 14 (a ?e1 edge-label ?v2400))
(309 i 5 (a ?e1 edge-p1 ?bp))
(310 i 6 (a ?e1 edge-p2 ?p2))
(311 i 14 (a ?e2 edge-label ?v2401))
(312 i 5 (a ?e2 edge-p1 ?bp))
(313 x 6 (a ?e2 edge-p2 ?p1) r-label-arrow-2B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-2B")) (#'rete.core/retract ?e1) (#'rete.core/asser ?e1 edge-label PLUS) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label ?l)))
(314 e 18 (a ?s stage-value labeling) r-label-arrow-3A)
(315 i 15 (a ?j junction-type arrow))
(316 i 11 (a ?j junction-p2 ?p2))
(317 i 12 (a ?j junction-base-point ?bp))
(318 i 16 (a ?j junction-p3 ?p3))
(319 i 13 (a ?j junction-p1 ?p1))
(320 i 6 (a ?e1 edge-p2 ?p1))
(321 i 5 (a ?e1 edge-p1 ?bp))
(322 i 22 (a ?e1 edge-label PLUS))
(323 i 14 (a ?e2 edge-label ?v2402))
(324 i 5 (a ?e2 edge-p1 ?bp))
(325 i 6 (a ?e2 edge-p2 ?p2))
(326 i 14 (a ?e3 edge-label ?v2403))
(327 i 5 (a ?e3 edge-p1 ?bp))
(328 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-3A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-3A")) (#'rete.core/retract ?e2 edge-label ?v2402) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(329 e 18 (a ?s stage-value labeling) r-label-arrow-3B)
(330 i 15 (a ?j junction-type arrow))
(331 i 11 (a ?j junction-p2 ?p2))
(332 i 12 (a ?j junction-base-point ?bp))
(333 i 16 (a ?j junction-p3 ?p3))
(334 i 13 (a ?j junction-p1 ?p1))
(335 i 6 (a ?e1 edge-p2 ?p1))
(336 i 5 (a ?e1 edge-p1 ?bp))
(337 i 22 (a ?e1 edge-label PLUS))
(338 i 14 (a ?e2 edge-label ?v2404))
(339 i 5 (a ?e2 edge-p1 ?bp))
(340 i 6 (a ?e2 edge-p2 ?p2))
(341 i 14 (a ?e3 edge-label ?v2405))
(342 i 5 (a ?e3 edge-p1 ?bp))
(343 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-3B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-3B")) (#'rete.core/retract ?e2 edge-label ?v2404) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(344 e 18 (a ?s stage-value labeling) r-label-arrow-4A)
(345 i 15 (a ?j junction-type arrow))
(346 i 11 (a ?j junction-p2 ?p2))
(347 i 12 (a ?j junction-base-point ?bp))
(348 i 16 (a ?j junction-p3 ?p3))
(349 i 13 (a ?j junction-p1 ?p1))
(350 i 6 (a ?e1 edge-p2 ?p3))
(351 i 5 (a ?e1 edge-p1 ?bp))
(352 i 22 (a ?e1 edge-label PLUS))
(353 i 14 (a ?e2 edge-label ?v2406))
(354 i 5 (a ?e2 edge-p1 ?bp))
(355 i 6 (a ?e2 edge-p2 ?p2))
(356 i 14 (a ?e3 edge-label ?v2407))
(357 i 5 (a ?e3 edge-p1 ?bp))
(358 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-4A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-4A")) (#'rete.core/retract ?e2 edge-label ?v2406) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(359 e 18 (a ?s stage-value labeling) r-label-arrow-4B)
(360 i 15 (a ?j junction-type arrow))
(361 i 11 (a ?j junction-p2 ?p2))
(362 i 12 (a ?j junction-base-point ?bp))
(363 i 16 (a ?j junction-p3 ?p3))
(364 i 13 (a ?j junction-p1 ?p1))
(365 i 6 (a ?e1 edge-p2 ?p3))
(366 i 5 (a ?e1 edge-p1 ?bp))
(367 i 22 (a ?e1 edge-label PLUS))
(368 i 14 (a ?e2 edge-label ?v2408))
(369 i 5 (a ?e2 edge-p1 ?bp))
(370 i 6 (a ?e2 edge-p2 ?p2))
(371 i 14 (a ?e3 edge-label ?v2409))
(372 i 5 (a ?e3 edge-p1 ?bp))
(373 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-4B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-4B")) (#'rete.core/retract ?e2 edge-label ?v2408) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(374 e 18 (a ?s stage-value labeling) r-label-arrow-5A)
(375 i 15 (a ?j junction-type arrow))
(376 i 11 (a ?j junction-p2 ?p2))
(377 i 12 (a ?j junction-base-point ?bp))
(378 i 16 (a ?j junction-p3 ?p3))
(379 i 13 (a ?j junction-p1 ?p1))
(380 i 6 (a ?e edge-p2 ?p2))
(381 i 5 (a ?e edge-p1 ?bp))
(382 i 24 (a ?e edge-label MINUS))
(383 i 6 (a ?e edge-p2 ?p1))
(384 i 5 (a ?e edge-p1 ?bp))
(385 i 6 (a ?e edge-p2 ?p3))
(386 i 5 (a ?e edge-p1 ?bp))
(387 x 25 (a ?e edge-label nil) r-label-arrow-5A 5 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-5A")) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(388 e 18 (a ?s stage-value labeling) r-label-arrow-5B)
(389 i 15 (a ?j junction-type arrow))
(390 i 11 (a ?j junction-p2 ?p2))
(391 i 12 (a ?j junction-base-point ?bp))
(392 i 16 (a ?j junction-p3 ?p3))
(393 i 13 (a ?j junction-p1 ?p1))
(394 i 6 (a ?e edge-p2 ?p2))
(395 i 5 (a ?e edge-p1 ?bp))
(396 i 24 (a ?e edge-label MINUS))
(397 i 6 (a ?e edge-p2 ?p1))
(398 i 5 (a ?e edge-p1 ?bp))
(399 i 25 (a ?e edge-label nil))
(400 i 6 (a ?e edge-p2 ?p3))
(401 x 5 (a ?e edge-p1 ?bp) r-label-arrow-5B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-5B")) (#'rete.core/retract ?e2) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3) (#'rete.core/asser ?e3 edge-label PLUS)))
(402 ex 18 (a ?s stage-value labeling) r-done-labeling -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-labeling")) (#'rete.core/retract ?s stage-value labeling) (#'rete.core/asser ?s stage-value plot-remaining-edges)))
(403 e 26 (a ?s stage-value plot-remaining-edges) r-plot-remaining)
(404 i 14 (a ?e edge-label ?l))
(405 i 5 (a ?e edge-p1 ?p1))
(406 i 6 (a ?e edge-p2 ?p2))
(407 i 19 (a ?e edge-plotted ?v2410))
(408 x 27 (f ?l != nil) r-plot-remaining 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: plot-remaining")) (#'rete.core/retract ?e edge-plotted ?v2410) (#'rete.core/asser ?e edge-plotted t)))
(409 e 26 (a ?s stage-value plot-remaining-edges) r-plot-boundaries)
(410 i 14 (a ?e edge-label ?v2411))
(411 i 5 (a ?e edge-p1 ?p1))
(412 i 6 (a ?e edge-p2 ?p2))
(413 x 19 (a ?e edge-plotted ?v2412) r-plot-boundaries 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: plot-boundaries")) (#'rete.core/retract ?e edge-plotted ?v2412) (#'rete.core/asser ?e edge-plotted t)))
(414 e 26 (a ?s stage-value plot-remaining-edges) r-done-plotting)
(415 x nil (f true not (#'rete.core/exist ?e edge-plotted nil)) r-done-plotting -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-plotting")) (#'rete.core/retract ?s stage-value plot-remaining-edges) (#'rete.core/asser ?s stage-value done)))

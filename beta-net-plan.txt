(0 e 0 (a ?s stage-value duplicate) r-reverse-edges)
(1 i 1 (a ?l line-p2 ?p2))
(2 x 2 (a ?l line-p1 ?p1) r-reverse-edges 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: reverse-edges p1 " ?p1 " p2 " ?p2)) (#'rete.core/asser (#'clojure.core/gensym "edge") edge-plotted NIL edge-p2 ?p2 edge-p1 ?p1 edge-joined FALSE edge-label NIL) (#'rete.core/asser (#'clojure.core/gensym "edge") edge-plotted NIL edge-p2 ?p1 edge-p1 ?p2 edge-joined FALSE edge-label NIL) (#'rete.core/retract ?l line-p2 ?p2 line-p1 ?p1)))
(3 ex 0 (a ?s stage-value duplicate) r-done-reversing -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-reversing")) (#'rete.core/retract ?s stage-value duplicate) (#'rete.core/asser ?s stage-value detect-3-junctions-M)))
(4 e 3 (a ?s stage-value detect-3-junctions-M) r1-make-3-junction-M)
(5 i 4 (a ?e1 edge-joined FALSE))
(6 i 5 (a ?e1 edge-p1 ?base-point))
(7 i 6 (a ?e1 edge-p2 ?p1))
(8 i nil (f ?base-point > ?p1))
(9 i 4 (a ?e2 edge-joined FALSE))
(10 i 5 (a ?e2 edge-p1 ?base-point))
(11 i 6 (a ?e2 edge-p2 ?p2))
(12 i nil (f ?p1 > ?p2))
(13 i 4 (a ?e3 edge-joined FALSE))
(14 i 5 (a ?e3 edge-p1 ?base-point))
(15 i 6 (a ?e3 edge-p2 ?p3))
(16 i 7 (f ?p1 != ?p3))
(17 x 7 (f ?p2 != ?p3) r1-make-3-junction-M 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: make-3-junction-M bp " ?base-point " p1 " ?p1 " p2 " ?p2 " p3 " ?p3)) (#'wz/make-3-junction ?base-point ?p1 ?p2 ?p3) (#'rete.core/retract ?e1 edge-joined FALSE) (#'rete.core/asser ?e1 edge-joined TRUE) (#'rete.core/retract ?e2 edge-joined FALSE) (#'rete.core/asser ?e2 edge-joined TRUE) (#'rete.core/retract ?e3 edge-joined FALSE) (#'rete.core/asser ?e3 edge-joined TRUE)))
(18 ex 3 (a ?s stage-value detect-3-junctions-M) r2-done-3-junctions-M -5 ((#'rete.core/retract ?s stage-value detect-3-junctions-M) (#'rete.core/asser ?s stage-value detect-3-junctions-R)))
(19 e 8 (a ?s stage-value detect-3-junctions-R) r1-make-3-junction-R)
(20 i 4 (a ?e1 edge-joined FALSE))
(21 i 5 (a ?e1 edge-p1 ?base-point))
(22 i 6 (a ?e1 edge-p2 ?p1))
(23 i 4 (a ?e2 edge-joined FALSE))
(24 i 5 (a ?e2 edge-p1 ?base-point))
(25 i 6 (a ?e2 edge-p2 ?p2))
(26 i nil (f ?p1 > ?p2))
(27 i 4 (a ?e3 edge-joined FALSE))
(28 i 5 (a ?e3 edge-p1 ?base-point))
(29 i 6 (a ?e3 edge-p2 ?p3))
(30 i 7 (f ?p1 != ?p3))
(31 x 7 (f ?p2 != ?p3) r1-make-3-junction-R 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: make-3-junction-R bp " ?base-point " p1 " ?p1 " p2 " ?p2 " p3 " ?p3)) (#'wz/make-3-junction ?base-point ?p1 ?p2 ?p3) (#'rete.core/retract ?e1 edge-joined FALSE) (#'rete.core/asser ?e1 edge-joined TRUE) (#'rete.core/retract ?e2 edge-joined FALSE) (#'rete.core/asser ?e2 edge-joined TRUE) (#'rete.core/retract ?e3 edge-joined FALSE) (#'rete.core/asser ?e3 edge-joined TRUE)))
(32 ex 8 (a ?s stage-value detect-3-junctions-R) r2-done-3-junctions-R -5 ((#'rete.core/retract ?s stage-value detect-3-junctions-R) (#'rete.core/asser ?s stage-value detect-2-junctions)))
(33 e 9 (a ?s stage-value detect-2-junctions) r1-make-L)
(34 i 4 (a ?e1 edge-joined FALSE))
(35 i 5 (a ?e1 edge-p1 ?base-point))
(36 i 6 (a ?e1 edge-p2 ?p1))
(37 i 4 (a ?e2 edge-joined FALSE))
(38 i 5 (a ?e2 edge-p1 ?base-point))
(39 i 6 (a ?e2 edge-p2 ?p2))
(40 i nil (f ?p1 > ?p2))
(41 x nil (f true not (#'rete.core/exist ?e3 edge-p2 ?p3 edge-p1 ?base-point)) r1-make-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 1-make-L bp " ?base-point " p1 " ?p1 " p2 " ?p2 " p3 " ?p3)) (#'rete.core/retract ?e1 edge-joined FALSE) (#'rete.core/asser ?e1 edge-joined TRUE) (#'rete.core/retract ?e2 edge-joined FALSE) (#'rete.core/asser ?e2 edge-joined TRUE) (#'rete.core/asser (#'clojure.core/gensym "junction") junction-type L junction-bigger-bp 0 junction-p2 ?p2 junction-base-point ?base-point junction-p1 ?p1 junction-lesser-bp 0)))
(42 e 9 (a ?s stage-value detect-2-junctions) r2-make-L)
(43 i 4 (a ?e1 edge-joined FALSE))
(44 i 5 (a ?e1 edge-p1 ?base-point))
(45 i 6 (a ?e1 edge-p2 ?p2))
(46 i 4 (a ?e2 edge-joined FALSE))
(47 i 5 (a ?e2 edge-p1 ?base-point))
(48 i 6 (a ?e2 edge-p2 ?p3))
(49 i nil (f ?p3 > ?p2))
(50 i 6 (a ?e3 edge-p2 ?p4))
(51 i 5 (a ?e3 edge-p1 ?base-point))
(52 x nil (f (#'wz/or2 (#'clojure.core/= ?p4 ?p2) (#'clojure.core/= ?p4 ?p3)) = true) r2-make-L 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: 2-make-L bp " ?base-point " p1 " ?p2 " p2 " ?p3 " p4 " ?p4)) (#'rete.core/retract ?e1 edge-joined FALSE) (#'rete.core/asser ?e1 edge-joined TRUE) (#'rete.core/retract ?e2 edge-joined FALSE) (#'rete.core/asser ?e2 edge-joined TRUE) (#'rete.core/asser (#'clojure.core/gensym "junction") junction-type L junction-bigger-bp 0 junction-p2 ?p3 junction-base-point ?base-point junction-p1 ?p2 junction-lesser-bp 0)))
(53 e 9 (a ?s stage-value detect-2-junctions) r-done-detecting)
(54 i 10 (a ?j junction-type ?t))
(55 i 11 (a ?j junction-p2 ?p3))
(56 i 12 (a ?j junction-base-point ?base-point))
(57 i 13 (a ?j junction-p1 ?p2))
(58 x nil (f true not (#'rete.core/exist ?e edge-joined FALSE)) r-done-detecting -10 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: done-detecting")) (#'rete.core/retract ?s stage-value detect-2-junctions) (#'rete.core/asser ?s stage-value find-initial-boundary)))
(59 e 14 (a ?s stage-value find-initial-boundary) r-compare-base-points-L1)
(60 i 12 (a ?j junction-base-point ?bp1))
(61 i 15 (a ?j junction-bigger-bp ?bb1))
(62 i 16 (a ?j junction-type L))
(63 i 12 (a ?x junction-base-point ?bp2))
(64 i nil (f ?bb1 = 0))
(65 x nil (f ?bp2 >= ?bp1) r-compare-base-points-L1 5 ((#'rete.core/retract ?j junction-bigger-bp ?bb1) (#'rete.core/asser ?j junction-bigger-bp ?bp2)))
(66 e 14 (a ?s stage-value find-initial-boundary) r-compare-base-points-A1)
(67 i 12 (a ?j junction-base-point ?bp1))
(68 i 15 (a ?j junction-bigger-bp ?bb1))
(69 i 17 (a ?j junction-type arrow))
(70 i 12 (a ?x junction-base-point ?bp2))
(71 i nil (f ?bb1 = 0))
(72 x nil (f ?bp2 >= ?bp1) r-compare-base-points-A1 5 ((#'rete.core/retract ?j junction-bigger-bp ?bb1) (#'rete.core/asser ?j junction-bigger-bp ?bp2)))
(73 e 14 (a ?s stage-value find-initial-boundary) r-initial-boundary-junction-L)
(74 i 16 (a ?j junction-type L))
(75 i 15 (a ?j junction-bigger-bp ?bbp))
(76 i 11 (a ?j junction-p2 ?p2))
(77 i 12 (a ?j junction-base-point ?base-point))
(78 i 13 (a ?j junction-p1 ?p1))
(79 i nil (f ?bbp <= ?base-point))
(80 i 18 (a ?e1 edge-label ?v1791))
(81 i 5 (a ?e1 edge-p1 ?base-point))
(82 i 6 (a ?e1 edge-p2 ?p1))
(83 i 18 (a ?e2 edge-label ?v1792))
(84 i 5 (a ?e2 edge-p1 ?base-point))
(85 x 6 (a ?e2 edge-p2 ?p2) r-initial-boundary-junction-L 0 ((#'rete.core/retract ?e1 edge-label ?v1791) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v1792) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s stage-value find-second-boundary)))
(86 e 14 (a ?s stage-value find-initial-boundary) r-initial-boundary-junction-arrow)
(87 i 17 (a ?j junction-type arrow))
(88 i 15 (a ?j junction-bigger-bp ?bbp))
(89 i 11 (a ?j junction-p2 ?p2))
(90 i 12 (a ?j junction-base-point ?bp))
(91 i 19 (a ?j junction-p3 ?p3))
(92 i 13 (a ?j junction-p1 ?p1))
(93 i 18 (a ?e1 edge-label ?v1793))
(94 i 5 (a ?e1 edge-p1 ?bp))
(95 i 6 (a ?e1 edge-p2 ?p1))
(96 i 18 (a ?e2 edge-label ?v1794))
(97 i 5 (a ?e2 edge-p1 ?bp))
(98 i 6 (a ?e2 edge-p2 ?p2))
(99 i 18 (a ?e3 edge-label ?v1795))
(100 i 5 (a ?e3 edge-p1 ?bp))
(101 i 6 (a ?e3 edge-p2 ?p3))
(102 x nil (f ?bbp <= ?bp) r-initial-boundary-junction-arrow 0 ((#'rete.core/retract ?e1 edge-label ?v1793) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v1794) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1795) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-initial-boundary) (#'rete.core/asser ?s stage-value find-second-boundary)))
(103 e 20 (a ?s stage-value find-second-boundary) r-compare-base-points-L2)
(104 i 21 (a ?j junction-lesser-bp ?lb1))
(105 i 12 (a ?j junction-base-point ?bp1))
(106 i 16 (a ?j junction-type L))
(107 i 12 (a ?x junction-base-point ?bp2))
(108 i nil (f ?lb1 = 0))
(109 x nil (f ?bp2 < ?bp1) r-compare-base-points-L2 5 ((#'rete.core/retract ?j junction-lesser-bp ?lb1) (#'rete.core/asser ?j junction-lesser-bp ?bp2)))
(110 e 20 (a ?s stage-value find-second-boundary) r-compare-base-points-A2)
(111 i 21 (a ?j junction-lesser-bp ?lb1))
(112 i 12 (a ?j junction-base-point ?bp1))
(113 i 17 (a ?j junction-type arrow))
(114 i 12 (a ?x junction-base-point ?bp2))
(115 i nil (f ?lb1 = 0))
(116 x nil (f ?bp2 < ?bp1) r-compare-base-points-A2 5 ((#'rete.core/retract ?j junction-lesser-bp ?lb1) (#'rete.core/asser ?j junction-lesser-bp ?bp2)))
(117 e 20 (a ?s stage-value find-second-boundary) r-second-boundary-junction-L)
(118 i 16 (a ?j junction-type L))
(119 i 11 (a ?j junction-p2 ?p2))
(120 i 12 (a ?j junction-base-point ?base-point))
(121 i 13 (a ?j junction-p1 ?p1))
(122 i 21 (a ?j junction-lesser-bp ?lbp))
(123 i nil (f ?lbp = 0))
(124 i 18 (a ?e1 edge-label ?v1796))
(125 i 5 (a ?e1 edge-p1 ?base-point))
(126 i 6 (a ?e1 edge-p2 ?p1))
(127 i 18 (a ?e2 edge-label ?v1797))
(128 i 5 (a ?e2 edge-p1 ?base-point))
(129 x 6 (a ?e2 edge-p2 ?p2) r-second-boundary-junction-L 0 ((#'rete.core/retract ?e1 edge-label ?v1796) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v1797) (#'rete.core/asser ?e2 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(130 e 20 (a ?s stage-value find-second-boundary) r-second-boundary-junction-arrow)
(131 i 17 (a ?j junction-type arrow))
(132 i 11 (a ?j junction-p2 ?p2))
(133 i 12 (a ?j junction-base-point ?bp))
(134 i 19 (a ?j junction-p3 ?p3))
(135 i 13 (a ?j junction-p1 ?p1))
(136 i 21 (a ?j junction-lesser-bp ?lbp))
(137 i nil (f ?lbp = 0))
(138 i 18 (a ?e1 edge-label ?v1798))
(139 i 5 (a ?e1 edge-p1 ?bp))
(140 i 6 (a ?e1 edge-p2 ?p1))
(141 i 18 (a ?e2 edge-label ?v1799))
(142 i 5 (a ?e2 edge-p1 ?bp))
(143 i 6 (a ?e2 edge-p2 ?p2))
(144 i 18 (a ?e3 edge-label ?v1800))
(145 i 5 (a ?e3 edge-p1 ?bp))
(146 x 6 (a ?e3 edge-p2 ?p3) r-second-boundary-junction-arrow 0 ((#'rete.core/retract ?e1 edge-label ?v1798) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v1799) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1800) (#'rete.core/asser ?e3 edge-label B) (#'rete.core/retract ?s stage-value find-second-boundary) (#'rete.core/asser ?s stage-value labeling)))
(147 e 22 (a ?s stage-value labeling) r-match-edge)
(148 i 23 (a ?e1 edge-plotted ?v1801))
(149 i 18 (a ?e1 edge-label ?l))
(150 i 5 (a ?e1 edge-p1 ?p1))
(151 i 6 (a ?e1 edge-p2 ?p2))
(152 i nil (f (#'wz/or3 (#'clojure.core/= ?l PLUS) (#'clojure.core/= ?l MINUS) (#'clojure.core/= ?l B)) = true))
(153 i 23 (a ?e2 edge-plotted ?v1802))
(154 i 24 (a ?e2 edge-label NIL))
(155 i 5 (a ?e2 edge-p1 ?p2))
(156 x 6 (a ?e2 edge-p2 ?p1) r-match-edge 0 ((#'rete.core/retract ?e1 edge-plotted ?v1801) (#'rete.core/asser ?e1 edge-plotted T) (#'rete.core/retract ?e2 edge-label NIL edge-plotted ?v1802) (#'rete.core/asser ?e2 edge-plotted T edge-label ?l)))
(157 e 22 (a ?s stage-value labeling) r-label-L)
(158 i 16 (a ?j junction-type L))
(159 i 12 (a ?j junction-base-point ?p1))
(160 i 6 (a ?e1 edge-p2 ?p2))
(161 i 5 (a ?e1 edge-p1 ?p1))
(162 i 18 (a ?e1 edge-label ?l))
(163 i nil (f (#'wz/or2 (#'clojure.core/= ?l PLUS) (#'clojure.core/= ?l MINUS)) = true))
(164 i 24 (a ?e2 edge-label NIL))
(165 i 5 (a ?e2 edge-p1 ?p1))
(166 i 6 (a ?e2 edge-p2 ?p3))
(167 x 7 (f ?p3 != ?p2) r-label-L 0 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label B)))
(168 e 22 (a ?s stage-value labeling) r-label-tee-A)
(169 i 25 (a ?j junction-type tee))
(170 i 11 (a ?j junction-p2 ?p2))
(171 i 12 (a ?j junction-base-point ?bp))
(172 i 19 (a ?j junction-p3 ?p3))
(173 i 13 (a ?j junction-p1 ?p1))
(174 i 24 (a ?e1 edge-label NIL))
(175 i 5 (a ?e1 edge-p1 ?bp))
(176 i 6 (a ?e1 edge-p2 ?p1))
(177 i 18 (a ?e2 edge-label ?v1803))
(178 i 5 (a ?e2 edge-p1 ?bp))
(179 x 6 (a ?e2 edge-p2 ?p3) r-label-tee-A 5 ((#'rete.core/retract ?e1 edge-label NIL) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label ?v1803) (#'rete.core/asser ?e2 edge-label B)))
(180 e 22 (a ?s stage-value labeling) r-label-tee-B)
(181 i 25 (a ?j junction-type tee))
(182 i 11 (a ?j junction-p2 ?p2))
(183 i 12 (a ?j junction-base-point ?bp))
(184 i 19 (a ?j junction-p3 ?p3))
(185 i 13 (a ?j junction-p1 ?p1))
(186 i 18 (a ?e1 edge-label ?v1804))
(187 i 5 (a ?e1 edge-p1 ?bp))
(188 i 6 (a ?e1 edge-p2 ?p1))
(189 i 24 (a ?e2 edge-label NIL))
(190 i 5 (a ?e2 edge-p1 ?bp))
(191 x 6 (a ?e2 edge-p2 ?p3) r-label-tee-B 0 ((#'rete.core/retract ?e1 edge-label ?v1804) (#'rete.core/asser ?e1 edge-label B) (#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label B)))
(192 e 22 (a ?s stage-value labeling) r-label-fork-1)
(193 i 26 (a ?j junction-type fork))
(194 i 12 (a ?j junction-base-point ?bp))
(195 i 6 (a ?e1 edge-p2 ?p1))
(196 i 5 (a ?e1 edge-p1 ?bp))
(197 i 27 (a ?e1 edge-label PLUS))
(198 i 24 (a ?e2 edge-label NIL))
(199 i 5 (a ?e2 edge-p1 ?bp))
(200 i 6 (a ?e2 edge-p2 ?p2))
(201 i 7 (f ?p2 != ?p1))
(202 i 18 (a ?e3 edge-label ?v1805))
(203 i 5 (a ?e3 edge-p1 ?bp))
(204 i 6 (a ?e3 edge-p2 ?p3))
(205 i 7 (f ?p3 != ?p2))
(206 x 7 (f ?p3 != ?p1) r-label-fork-1 0 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1805) (#'rete.core/asser ?e3 edge-label PLUS)))
(207 e 22 (a ?s stage-value labeling) r-label-fork-2)
(208 i 26 (a ?j junction-type fork))
(209 i 12 (a ?j junction-base-point ?bp))
(210 i 6 (a ?e1 edge-p2 ?p1))
(211 i 5 (a ?e1 edge-p1 ?bp))
(212 i 28 (a ?e1 edge-label B))
(213 i 6 (a ?e2 edge-p2 ?p2))
(214 i 5 (a ?e2 edge-p1 ?bp))
(215 i 29 (a ?e2 edge-label MINUS))
(216 i 7 (f ?p2 != ?p1))
(217 i 24 (a ?e3 edge-label NIL))
(218 i 5 (a ?e3 edge-p1 ?bp))
(219 i 6 (a ?e3 edge-p2 ?p3))
(220 i 7 (f ?p3 != ?p2))
(221 x 7 (f ?p3 != ?p1) r-label-fork-2 0 ((#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label B)))
(222 e 22 (a ?s stage-value labeling) r-label-fork-3)
(223 i 26 (a ?j junction-type fork))
(224 i 12 (a ?j junction-base-point ?bp))
(225 i 6 (a ?e1 edge-p2 ?p1))
(226 i 5 (a ?e1 edge-p1 ?bp))
(227 i 28 (a ?e1 edge-label B))
(228 i 6 (a ?e2 edge-p2 ?p2))
(229 i 5 (a ?e2 edge-p1 ?bp))
(230 i 28 (a ?e2 edge-label B))
(231 i 7 (f ?p2 != ?p1))
(232 i 24 (a ?e3 edge-label NIL))
(233 i 5 (a ?e3 edge-p1 ?bp))
(234 i 6 (a ?e3 edge-p2 ?p3))
(235 i 7 (f ?p3 != ?p2))
(236 x 7 (f ?p3 != ?p1) r-label-fork-3 0 ((#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label MINUS)))
(237 e 22 (a ?s stage-value labeling) r-label-fork-4)
(238 i 26 (a ?j junction-type fork))
(239 i 12 (a ?j junction-base-point ?bp))
(240 i 6 (a ?e1 edge-p2 ?p1))
(241 i 5 (a ?e1 edge-p1 ?bp))
(242 i 29 (a ?e1 edge-label MINUS))
(243 i 6 (a ?e2 edge-p2 ?p2))
(244 i 5 (a ?e2 edge-p1 ?bp))
(245 i 29 (a ?e2 edge-label MINUS))
(246 i 7 (f ?p2 != ?p1))
(247 i 24 (a ?e3 edge-label NIL))
(248 i 5 (a ?e3 edge-p1 ?bp))
(249 i 6 (a ?e3 edge-p2 ?p3))
(250 i 7 (f ?p3 != ?p2))
(251 x 7 (f ?p3 != ?p1) r-label-fork-4 0 ((#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label MINUS)))
(252 e 22 (a ?s stage-value labeling) r-label-arrow-1A)
(253 i 17 (a ?j junction-type arrow))
(254 i 11 (a ?j junction-p2 ?p2))
(255 i 12 (a ?j junction-base-point ?bp))
(256 i 19 (a ?j junction-p3 ?p3))
(257 i 13 (a ?j junction-p1 ?p1))
(258 i 6 (a ?e1 edge-p2 ?p1))
(259 i 5 (a ?e1 edge-p1 ?bp))
(260 i 18 (a ?e1 edge-label ?l))
(261 i nil (f (#'wz/or2 (#'clojure.core/= ?l B) (#'clojure.core/= ?l MINUS)) = true))
(262 i 24 (a ?e2 edge-label NIL))
(263 i 5 (a ?e2 edge-p1 ?bp))
(264 i 6 (a ?e2 edge-p2 ?p2))
(265 i 18 (a ?e3 edge-label ?v1806))
(266 i 5 (a ?e3 edge-p1 ?bp))
(267 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-1A 5 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1806) (#'rete.core/asser ?e3 edge-label ?l)))
(268 e 22 (a ?s stage-value labeling) r-label-arrow-1B)
(269 i 17 (a ?j junction-type arrow))
(270 i 11 (a ?j junction-p2 ?p2))
(271 i 12 (a ?j junction-base-point ?bp))
(272 i 19 (a ?j junction-p3 ?p3))
(273 i 13 (a ?j junction-p1 ?p1))
(274 i 6 (a ?e1 edge-p2 ?p1))
(275 i 5 (a ?e1 edge-p1 ?bp))
(276 i 18 (a ?e1 edge-label ?l))
(277 i nil (f (#'wz/or2 (#'clojure.core/= ?l B) (#'clojure.core/= ?l MINUS)) = true))
(278 i 18 (a ?e2 edge-label ?v1807))
(279 i 5 (a ?e2 edge-p1 ?bp))
(280 i 6 (a ?e2 edge-p2 ?p2))
(281 i 24 (a ?e3 edge-label NIL))
(282 i 5 (a ?e3 edge-p1 ?bp))
(283 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-1B 0 ((#'rete.core/retract ?e2 edge-label ?v1807) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label ?l)))
(284 e 22 (a ?s stage-value labeling) r-label-arrow-2A)
(285 i 17 (a ?j junction-type arrow))
(286 i 11 (a ?j junction-p2 ?p2))
(287 i 12 (a ?j junction-base-point ?bp))
(288 i 19 (a ?j junction-p3 ?p3))
(289 i 13 (a ?j junction-p1 ?p1))
(290 i 6 (a ?e1 edge-p2 ?p3))
(291 i 5 (a ?e1 edge-p1 ?bp))
(292 i 18 (a ?e1 edge-label ?l))
(293 i nil (f (#'wz/or2 (#'clojure.core/= ?l B) (#'clojure.core/= ?l MINUS)) = true))
(294 i 24 (a ?e2 edge-label NIL))
(295 i 5 (a ?e2 edge-p1 ?bp))
(296 i 6 (a ?e2 edge-p2 ?p2))
(297 i 18 (a ?e3 edge-label ?v1808))
(298 i 5 (a ?e3 edge-p1 ?bp))
(299 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-2A 5 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1808) (#'rete.core/asser ?e3 edge-label ?l)))
(300 e 22 (a ?s stage-value labeling) r-label-arrow-2B)
(301 i 17 (a ?j junction-type arrow))
(302 i 11 (a ?j junction-p2 ?p2))
(303 i 12 (a ?j junction-base-point ?bp))
(304 i 19 (a ?j junction-p3 ?p3))
(305 i 13 (a ?j junction-p1 ?p1))
(306 i 6 (a ?e1 edge-p2 ?p3))
(307 i 5 (a ?e1 edge-p1 ?bp))
(308 i 18 (a ?e1 edge-label ?l))
(309 i nil (f (#'wz/or2 (#'clojure.core/= ?l B) (#'clojure.core/= ?l MINUS)) = true))
(310 i 18 (a ?e2 edge-label ?v1809))
(311 i 5 (a ?e2 edge-p1 ?bp))
(312 i 6 (a ?e2 edge-p2 ?p2))
(313 i 24 (a ?e3 edge-label NIL))
(314 i 5 (a ?e3 edge-p1 ?bp))
(315 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-2B 0 ((#'rete.core/retract ?e2 edge-label ?v1809) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label ?l)))
(316 e 22 (a ?s stage-value labeling) r-label-arrow-3A)
(317 i 17 (a ?j junction-type arrow))
(318 i 11 (a ?j junction-p2 ?p2))
(319 i 12 (a ?j junction-base-point ?bp))
(320 i 19 (a ?j junction-p3 ?p3))
(321 i 13 (a ?j junction-p1 ?p1))
(322 i 6 (a ?e1 edge-p2 ?p1))
(323 i 5 (a ?e1 edge-p1 ?bp))
(324 i 27 (a ?e1 edge-label PLUS))
(325 i 24 (a ?e2 edge-label NIL))
(326 i 5 (a ?e2 edge-p1 ?bp))
(327 i 6 (a ?e2 edge-p2 ?p2))
(328 i 18 (a ?e3 edge-label ?v1810))
(329 i 5 (a ?e3 edge-p1 ?bp))
(330 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-3A 5 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3 edge-label ?v1810) (#'rete.core/asser ?e3 edge-label PLUS)))
(331 e 22 (a ?s stage-value labeling) r-label-arrow-3B)
(332 i 17 (a ?j junction-type arrow))
(333 i 11 (a ?j junction-p2 ?p2))
(334 i 12 (a ?j junction-base-point ?bp))
(335 i 19 (a ?j junction-p3 ?p3))
(336 i 13 (a ?j junction-p1 ?p1))
(337 i 6 (a ?e1 edge-p2 ?p1))
(338 i 5 (a ?e1 edge-p1 ?bp))
(339 i 27 (a ?e1 edge-label PLUS))
(340 i 18 (a ?e2 edge-label ?v1811))
(341 i 5 (a ?e2 edge-p1 ?bp))
(342 i 6 (a ?e2 edge-p2 ?p2))
(343 i 24 (a ?e3 edge-label NIL))
(344 i 5 (a ?e3 edge-p1 ?bp))
(345 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-3B 0 ((#'clojure.core/println (#'clojure.core/str (#'wz/cnt) " FIRE: label-arrow-3B")) (#'rete.core/retract ?e2 edge-label ?v1811) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label PLUS)))
(346 e 22 (a ?s stage-value labeling) r-label-arrow-4A)
(347 i 17 (a ?j junction-type arrow))
(348 i 11 (a ?j junction-p2 ?p2))
(349 i 12 (a ?j junction-base-point ?bp))
(350 i 19 (a ?j junction-p3 ?p3))
(351 i 13 (a ?j junction-p1 ?p1))
(352 i 6 (a ?e1 edge-p2 ?p3))
(353 i 5 (a ?e1 edge-p1 ?bp))
(354 i 27 (a ?e1 edge-label PLUS))
(355 i 24 (a ?e2 edge-label NIL))
(356 i 5 (a ?e2 edge-p1 ?bp))
(357 i 6 (a ?e2 edge-p2 ?p2))
(358 i 18 (a ?e3 edge-label ?v1812))
(359 i 5 (a ?e3 edge-p1 ?bp))
(360 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-4A 5 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3 edge-label ?v1812) (#'rete.core/asser ?e3 edge-label PLUS)))
(361 e 22 (a ?s stage-value labeling) r-label-arrow-4B)
(362 i 17 (a ?j junction-type arrow))
(363 i 11 (a ?j junction-p2 ?p2))
(364 i 12 (a ?j junction-base-point ?bp))
(365 i 19 (a ?j junction-p3 ?p3))
(366 i 13 (a ?j junction-p1 ?p1))
(367 i 6 (a ?e1 edge-p2 ?p3))
(368 i 5 (a ?e1 edge-p1 ?bp))
(369 i 27 (a ?e1 edge-label PLUS))
(370 i 18 (a ?e2 edge-label ?v1813))
(371 i 5 (a ?e2 edge-p1 ?bp))
(372 i 6 (a ?e2 edge-p2 ?p2))
(373 i 24 (a ?e3 edge-label NIL))
(374 i 5 (a ?e3 edge-p1 ?bp))
(375 x 6 (a ?e3 edge-p2 ?p1) r-label-arrow-4B 0 ((#'rete.core/retract ?e2 edge-label ?v1813) (#'rete.core/asser ?e2 edge-label MINUS) (#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label PLUS)))
(376 e 22 (a ?s stage-value labeling) r-label-arrow-5A)
(377 i 17 (a ?j junction-type arrow))
(378 i 11 (a ?j junction-p2 ?p2))
(379 i 12 (a ?j junction-base-point ?bp))
(380 i 19 (a ?j junction-p3 ?p3))
(381 i 13 (a ?j junction-p1 ?p1))
(382 i 6 (a ?e1 edge-p2 ?p2))
(383 i 5 (a ?e1 edge-p1 ?bp))
(384 i 29 (a ?e1 edge-label MINUS))
(385 i 18 (a ?e2 edge-label ?v1814))
(386 i 5 (a ?e2 edge-p1 ?bp))
(387 i 6 (a ?e2 edge-p2 ?p1))
(388 i 24 (a ?e3 edge-label NIL))
(389 i 5 (a ?e3 edge-p1 ?bp))
(390 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-5A 5 ((#'rete.core/retract ?e2 edge-label ?v1814) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label NIL) (#'rete.core/asser ?e3 edge-label PLUS)))
(391 e 22 (a ?s stage-value labeling) r-label-arrow-5B)
(392 i 17 (a ?j junction-type arrow))
(393 i 11 (a ?j junction-p2 ?p2))
(394 i 12 (a ?j junction-base-point ?bp))
(395 i 19 (a ?j junction-p3 ?p3))
(396 i 13 (a ?j junction-p1 ?p1))
(397 i 6 (a ?e1 edge-p2 ?p2))
(398 i 5 (a ?e1 edge-p1 ?bp))
(399 i 29 (a ?e1 edge-label MINUS))
(400 i 24 (a ?e2 edge-label NIL))
(401 i 5 (a ?e2 edge-p1 ?bp))
(402 i 6 (a ?e2 edge-p2 ?p1))
(403 i 18 (a ?e3 edge-label ?v1815))
(404 i 5 (a ?e3 edge-p1 ?bp))
(405 x 6 (a ?e3 edge-p2 ?p3) r-label-arrow-5B 0 ((#'rete.core/retract ?e2 edge-label NIL) (#'rete.core/asser ?e2 edge-label PLUS) (#'rete.core/retract ?e3 edge-label ?v1815) (#'rete.core/asser ?e3 edge-label PLUS)))
(406 ex 22 (a ?s stage-value labeling) r-done-labeling -10 ((#'rete.core/retract ?s stage-value labeling) (#'rete.core/asser ?s stage-value plot-remaining-edges)))
(407 e 30 (a ?s stage-value plot-remaining-edges) r-plot-remaining)
(408 i 18 (a ?e edge-label ?l))
(409 i 5 (a ?e edge-p1 ?p1))
(410 i 6 (a ?e edge-p2 ?p2))
(411 i 31 (a ?e edge-plotted NIL))
(412 x 32 (f ?l != NIL) r-plot-remaining 0 ((#'rete.core/retract ?e edge-plotted NIL) (#'rete.core/asser ?e edge-plotted T)))
(413 e 30 (a ?s stage-value plot-remaining-edges) r-plot-boundaries)
(414 i 24 (a ?e edge-label NIL))
(415 i 5 (a ?e edge-p1 ?p1))
(416 i 6 (a ?e edge-p2 ?p2))
(417 x 31 (a ?e edge-plotted NIL) r-plot-boundaries 0 ((#'rete.core/retract ?e edge-plotted NIL) (#'rete.core/asser ?e edge-plotted T)))
(418 ex 30 (a ?s stage-value plot-remaining-edges) r-done-plot-remaining-edges -10 ((#'rete.core/retract ?s stage-value plot-remaining-edges) (#'rete.core/asser ?s stage-value done-plot-remaining-edges)))
(419 e 33 (a ?s stage-value done-plot-remaining-edges) r-done-plotting)
(420 x nil (f true not (#'rete.core/exist ?e edge-plotted NIL)) r-done-plotting 0 ((#'rete.core/retract ?s stage-value done-plot-remaining-edges) (#'rete.core/asser ?s stage-value done)))

(0 e 0 (a ?g goal-is-to-action unlock) hold-chest-to-put-on-floor)
(1 i 1 (a ?g goal-is-to-argument1 ?chest))
(2 i 2 (a ?t thing-name ?chest))
(3 i 3 (a ?t thing-weight light))
(4 i 4 (a ?t thing-on-top-of ?v1327))
(5 i 5 (f ?v1327 != floor))
(6 i 6 (a ?m monkey-holding ?v1328))
(7 i 7 (f ?v1328 != ?chest))
(8 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 ?chest)) hold-chest-to-put-on-floor 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 ?chest)))
(9 e 0 (a ?g goal-is-to-action unlock) put-chest-on-floor)
(10 i 1 (a ?g goal-is-to-argument1 ?chest))
(11 i 9 (a ?monkey monkey-on-top-of ?on))
(12 i 6 (a ?monkey monkey-holding ?chest))
(13 i 10 (a ?monkey monkey-location ?place))
(14 i 4 (a ?thing thing-on-top-of ?v1329))
(15 i 11 (a ?thing thing-location ?v1330))
(16 x 2 (a ?thing thing-name ?chest) put-chest-on-floor 0 ((#'clojure.core/println (#'clojure.core/str "Monkey throws the " ?chest " off the " ?on " onto the floor.")) (#'rete.core/retract ?monkey monkey-holding ?chest) (#'rete.core/asser ?monkey monkey-holding blank) (#'rete.core/retract ?thing thing-location ?v1330 thing-on-top-of ?v1329) (#'rete.core/asser ?thing thing-location ?place thing-on-top-of floor)))
(17 e 0 (a ?g goal-is-to-action unlock) get-key-to-unlock)
(18 i 1 (a ?g goal-is-to-argument1 ?obj))
(19 i 2 (a ?t thing-name ?obj))
(20 i 12 (a ?t thing-on-top-of floor))
(21 i 13 (a ?c chest-unlocked-by ?key))
(22 i 14 (a ?c chest-name ?obj))
(23 i 6 (a ?m monkey-holding ?v1331))
(24 i 7 (f ?v1331 != ?key))
(25 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 ?key)) get-key-to-unlock 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 ?key)))
(26 e 0 (a ?g goal-is-to-action unlock) move-to-chest-with-key)
(27 i 1 (a ?g goal-is-to-argument1 ?chest))
(28 i 10 (a ?m monkey-location ?mplace))
(29 i 6 (a ?m monkey-holding ?key))
(30 i 11 (a ?t thing-location ?cplace))
(31 i 2 (a ?t thing-name ?chest))
(32 i 12 (a ?t thing-on-top-of floor))
(33 i 7 (f ?cplace != ?mplace))
(34 i 13 (a ?c chest-unlocked-by ?key))
(35 i 14 (a ?c chest-name ?chest))
(36 x nil (f true not (#'rete.core/exist ?x goal-is-to-action walk-to goal-is-to-argument1 ?cplace)) move-to-chest-with-key 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action walk-to goal-is-to-argument1 ?cplace)))
(37 e 0 (a ?goal goal-is-to-action unlock) unlock-chest-with-key)
(38 i 1 (a ?goal goal-is-to-argument1 ?name))
(39 i 16 (a ?chest chest-contents ?contents))
(40 i 14 (a ?chest chest-name ?name))
(41 i 13 (a ?chest chest-unlocked-by ?key))
(42 i 11 (a ?t thing-location ?place))
(43 i 2 (a ?t thing-name ?name))
(44 i 4 (a ?t thing-on-top-of ?on))
(45 i 10 (a ?m monkey-location ?place))
(46 i 6 (a ?m monkey-holding ?key))
(47 x 9 (a ?m monkey-on-top-of ?on) unlock-chest-with-key 0 ((#'clojure.core/println (#'clojure.core/str "Monkey opens the " ?name " with the " ?key " revealing the " ?contents ".")) (#'rete.core/retract ?chest chest-contents ?contents) (#'rete.core/asser ?chest chest-contents nothing) (#'rete.core/asser (#'clojure.core/gensym "thing") thing-location ?place thing-name ?contents thing-weight light thing-on-top-of ?name) (#'rete.core/retract ?goal goal-is-to-action unlock goal-is-to-argument1 ?name)))
(48 e 8 (a ?g goal-is-to-action hold) unlock-chest-to-hold-object)
(49 i 1 (a ?g goal-is-to-argument1 ?obj))
(50 i 14 (a ?c chest-name ?chest))
(51 i 16 (a ?c chest-contents ?obj))
(52 x nil (f true not (#'rete.core/exist ?x goal-is-to-action unlock goal-is-to-argument1 ?chest)) unlock-chest-to-hold-object 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action unlock goal-is-to-argument1 ?chest)))
(53 e 8 (a ?g goal-is-to-action hold) use-ladder-to-hold)
(54 i 1 (a ?g goal-is-to-argument1 ?obj))
(55 i 11 (a ?t thing-location ?place))
(56 i 2 (a ?t thing-name ?obj))
(57 i 3 (a ?t thing-weight light))
(58 i 17 (a ?t thing-on-top-of ceiling))
(59 i nil (f true not (#'rete.core/exist ?x thing-location ?place thing-name ladder)))
(60 x nil (f true not (#'rete.core/exist ?y goal-is-to-action move goal-is-to-argument2 ?place goal-is-to-argument1 ladder)) use-ladder-to-hold 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action move goal-is-to-argument2 ?place goal-is-to-argument1 ladder)))
(61 e 8 (a ?g goal-is-to-action hold) climb-ladder-to-hold)
(62 i 1 (a ?g goal-is-to-argument1 ?obj))
(63 i 11 (a ?t thing-location ?place))
(64 i 2 (a ?t thing-name ?obj))
(65 i 3 (a ?t thing-weight light))
(66 i 17 (a ?t thing-on-top-of ceiling))
(67 i 11 (a ?t2 thing-location ?place))
(68 i 18 (a ?t2 thing-name ladder))
(69 i 12 (a ?t2 thing-on-top-of floor))
(70 i 9 (a ?m monkey-on-top-of ?v1332))
(71 i 22 (f ?v1332 != ladder))
(72 x nil (f true not (#'rete.core/exist ?x goal-is-to-action on goal-is-to-argument1 ladder)) climb-ladder-to-hold 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action on goal-is-to-argument1 ladder)))
(73 e 8 (a ?goal goal-is-to-action hold) grab-object-from-ladder)
(74 i 1 (a ?goal goal-is-to-argument1 ?name))
(75 i 17 (a ?thing thing-on-top-of ceiling))
(76 i 3 (a ?thing thing-weight light))
(77 i 2 (a ?thing thing-name ?name))
(78 i 11 (a ?thing thing-location ?place))
(79 i 11 (a ?t2 thing-location ?place))
(80 i 18 (a ?t2 thing-name ladder))
(81 i 24 (a ?monkey monkey-on-top-of ladder))
(82 i 25 (a ?monkey monkey-holding blank))
(83 x 10 (a ?monkey monkey-location ?place) grab-object-from-ladder 0 ((#'clojure.core/println (#'clojure.core/str "Monkey grabs the " ?name ".")) (#'rete.core/retract ?thing thing-location ?place thing-on-top-of ceiling) (#'rete.core/asser ?thing thing-location held thing-on-top-of held) (#'rete.core/retract ?monkey monkey-holding blank) (#'rete.core/asser ?monkey monkey-holding ?name) (#'rete.core/retract ?goal goal-is-to-action hold goal-is-to-argument1 ?name)))
(84 e 8 (a ?g goal-is-to-action hold) climb-to-hold)
(85 i 1 (a ?g goal-is-to-argument1 ?obj))
(86 i 11 (a ?t thing-location ?place))
(87 i 2 (a ?t thing-name ?obj))
(88 i 3 (a ?t thing-weight light))
(89 i 4 (a ?t thing-on-top-of ?on))
(90 i 26 (f ?on != ceiling))
(91 i 10 (a ?m monkey-location ?place))
(92 i 9 (a ?m monkey-on-top-of ?v1333))
(93 i 7 (f ?v1333 != ?on))
(94 x nil (f true not (#'rete.core/exist ?x goal-is-to-action on goal-is-to-argument1 ?on)) climb-to-hold 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action on goal-is-to-argument1 ?on)))
(95 e 8 (a ?g goal-is-to-action hold) walk-to-hold)
(96 i 1 (a ?g goal-is-to-argument1 ?obj))
(97 i 11 (a ?t thing-location ?place))
(98 i 2 (a ?t thing-name ?obj))
(99 i 3 (a ?t thing-weight light))
(100 i 4 (a ?t thing-on-top-of ?v1334))
(101 i 26 (f ?v1334 != ceiling))
(102 i 10 (a ?m monkey-location ?v1335))
(103 i 7 (f ?v1335 != ?place))
(104 x nil (f true not (#'rete.core/exist ?x goal-is-to-action walk-to goal-is-to-argument1 ?place)) walk-to-hold 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(105 e 8 (a ?g goal-is-to-action hold) drop-to-hold)
(106 i 1 (a ?g goal-is-to-argument1 ?obj))
(107 i 11 (a ?t thing-location ?place))
(108 i 2 (a ?t thing-name ?obj))
(109 i 3 (a ?t thing-weight light))
(110 i 4 (a ?t thing-on-top-of ?on))
(111 i 10 (a ?m monkey-location ?place))
(112 i 6 (a ?m monkey-holding ?v1336))
(113 i 9 (a ?m monkey-on-top-of ?on))
(114 i 27 (f ?v1336 != blank))
(115 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 blank)) drop-to-hold 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 blank)))
(116 e 8 (a ?goal goal-is-to-action hold) grab-object)
(117 i 1 (a ?goal goal-is-to-argument1 ?name))
(118 i 4 (a ?thing thing-on-top-of ?on))
(119 i 3 (a ?thing thing-weight light))
(120 i 2 (a ?thing thing-name ?name))
(121 i 11 (a ?thing thing-location ?place))
(122 i 9 (a ?monkey monkey-on-top-of ?on))
(123 i 25 (a ?monkey monkey-holding blank))
(124 x 10 (a ?monkey monkey-location ?place) grab-object 0 ((#'clojure.core/println (#'clojure.core/str "Monkey grabs the " ?name ".")) (#'rete.core/retract ?thing thing-location ?place thing-on-top-of ?on) (#'rete.core/asser ?thing thing-location held thing-on-top-of held) (#'rete.core/retract ?monkey monkey-holding blank) (#'rete.core/asser ?monkey monkey-holding ?name) (#'rete.core/retract ?goal goal-is-to-action hold goal-is-to-argument1 ?name)))
(125 e 8 (a ?goal goal-is-to-action hold) drop-object)
(126 i 28 (a ?goal goal-is-to-argument1 blank))
(127 i 9 (a ?monkey monkey-on-top-of ?on))
(128 i 6 (a ?monkey monkey-holding ?name))
(129 i 10 (a ?monkey monkey-location ?place))
(130 i 27 (f ?name != blank))
(131 i 4 (a ?thing thing-on-top-of ?v1337))
(132 i 11 (a ?thing thing-location ?v1338))
(133 x 2 (a ?thing thing-name ?name) drop-object 0 ((#'clojure.core/println (#'clojure.core/str "Monkey drops the " ?name ".")) (#'rete.core/retract ?monkey monkey-holding ?name) (#'rete.core/asser ?monkey monkey-holding blank) (#'rete.core/retract ?thing thing-location ?v1338 thing-on-top-of ?v1337) (#'rete.core/asser ?thing thing-location ?place thing-on-top-of ?on) (#'rete.core/retract ?goal goal-is-to-action hold goal-is-to-argument1 blank)))
(134 e 19 (a ?g goal-is-to-action move) unlock-chest-to-move-object)
(135 i 20 (a ?g goal-is-to-argument2 ?place))
(136 i 1 (a ?g goal-is-to-argument1 ?obj))
(137 i 14 (a ?c chest-name ?chest))
(138 i 16 (a ?c chest-contents ?obj))
(139 x nil (f true not (#'rete.core/exist ?x goal-is-to-action unlock goal-is-to-argument1 ?chest)) unlock-chest-to-move-object 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action unlock goal-is-to-argument1 ?chest)))
(140 e 19 (a ?g goal-is-to-action move) hold-object-to-move)
(141 i 20 (a ?g goal-is-to-argument2 ?place))
(142 i 1 (a ?g goal-is-to-argument1 ?obj))
(143 i 11 (a ?t thing-location ?v1339))
(144 i 2 (a ?t thing-name ?obj))
(145 i 3 (a ?t thing-weight light))
(146 i 7 (f ?v1339 != ?place))
(147 i 6 (a ?m monkey-holding ?v1340))
(148 i 7 (f ?v1340 != ?obj))
(149 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 ?obj)) hold-object-to-move 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 ?obj)))
(150 e 19 (a ?g goal-is-to-action move) move-object-to-place)
(151 i 20 (a ?g goal-is-to-argument2 ?place))
(152 i 1 (a ?g goal-is-to-argument1 ?obj))
(153 i 10 (a ?m monkey-location ?v1341))
(154 i 6 (a ?m monkey-holding ?obj))
(155 i 7 (f ?v1341 != ?place))
(156 x nil (f true not (#'rete.core/exist ?x goal-is-to-action walk-to goal-is-to-argument1 ?place)) move-object-to-place 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(157 e 19 (a ?goal goal-is-to-action move) drop-object-once-moved)
(158 i 20 (a ?goal goal-is-to-argument2 ?place))
(159 i 1 (a ?goal goal-is-to-argument1 ?name))
(160 i 6 (a ?monkey monkey-holding ?obj))
(161 i 10 (a ?monkey monkey-location ?place))
(162 i 4 (a ?thing thing-on-top-of ?v1342))
(163 i 11 (a ?thing thing-location ?v1343))
(164 i 3 (a ?thing thing-weight light))
(165 x 2 (a ?thing thing-name ?name) drop-object-once-moved 0 ((#'clojure.core/println (#'clojure.core/str "Monkey drops the " ?name ".")) (#'rete.core/retract ?monkey monkey-holding ?obj) (#'rete.core/asser ?monkey monkey-holding blank) (#'rete.core/retract ?thing thing-location ?v1343 thing-on-top-of ?v1342) (#'rete.core/asser ?thing thing-location ?place thing-on-top-of floor) (#'rete.core/retract ?goal goal-is-to-action move goal-is-to-argument2 ?place goal-is-to-argument1 ?name)))
(166 e 19 (a ?goal goal-is-to-action move) already-moved-object)
(167 i 20 (a ?goal goal-is-to-argument2 ?place))
(168 i 1 (a ?goal goal-is-to-argument1 ?obj))
(169 i 11 (a ?t thing-location ?place))
(170 x 2 (a ?t thing-name ?obj) already-moved-object 0 ((#'rete.core/retract ?goal goal-is-to-action move goal-is-to-argument2 ?place goal-is-to-argument1 ?obj)))
(171 e 15 (a ?goal goal-is-to-action walk-to) already-at-place)
(172 i 1 (a ?goal goal-is-to-argument1 ?place))
(173 x 10 (a ?m monkey-location ?place) already-at-place 0 ((#'rete.core/retract ?goal goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(174 e 15 (a ?g goal-is-to-action walk-to) get-on-floor-to-walk)
(175 i 1 (a ?g goal-is-to-argument1 ?place))
(176 i 10 (a ?m monkey-location ?v1344))
(177 i 9 (a ?m monkey-on-top-of ?v1345))
(178 i 5 (f ?v1345 != floor))
(179 i 7 (f ?v1344 != ?place))
(180 x nil (f true not (#'rete.core/exist ?x goal-is-to-action on goal-is-to-argument1 floor)) get-on-floor-to-walk 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action on goal-is-to-argument1 floor)))
(181 e 15 (a ?goal goal-is-to-action walk-to) walk-holding-nothing)
(182 i 1 (a ?goal goal-is-to-argument1 ?place))
(183 i 30 (a ?monkey monkey-on-top-of floor))
(184 i 25 (a ?monkey monkey-holding blank))
(185 i 10 (a ?monkey monkey-location ?v1346))
(186 x 7 (f ?v1346 != ?place) walk-holding-nothing 0 ((#'clojure.core/println (#'clojure.core/str "Monkey walks to " ?place ".")) (#'rete.core/retract ?monkey monkey-location ?v1346) (#'rete.core/asser ?monkey monkey-location ?place) (#'rete.core/retract ?goal goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(187 e 15 (a ?goal goal-is-to-action walk-to) walk-holding-object)
(188 i 1 (a ?goal goal-is-to-argument1 ?place))
(189 i 30 (a ?monkey monkey-on-top-of floor))
(190 i 6 (a ?monkey monkey-holding ?obj))
(191 i 10 (a ?monkey monkey-location ?v1347))
(192 i 7 (f ?v1347 != ?place))
(193 x 27 (f ?obj != blank) walk-holding-object 0 ((#'clojure.core/println (#'clojure.core/str "Monkey walks to " ?place " holding the " ?obj ".")) (#'rete.core/retract ?monkey monkey-location ?v1347) (#'rete.core/asser ?monkey monkey-location ?place) (#'rete.core/retract ?goal goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(194 e 23 (a ?goal goal-is-to-action on) jump-onto-floor)
(195 i 29 (a ?goal goal-is-to-argument1 floor))
(196 i 9 (a ?monkey monkey-on-top-of ?on))
(197 x 5 (f ?on != floor) jump-onto-floor 0 ((#'clojure.core/println (#'clojure.core/str "Monkey jumps off the " ?on " onto the floor.")) (#'rete.core/retract ?monkey monkey-on-top-of ?on) (#'rete.core/asser ?monkey monkey-on-top-of floor) (#'rete.core/retract ?goal goal-is-to-action on goal-is-to-argument1 floor)))
(198 e 23 (a ?g goal-is-to-action on) walk-to-place-to-climb)
(199 i 1 (a ?g goal-is-to-argument1 ?obj))
(200 i 11 (a ?t thing-location ?place))
(201 i 2 (a ?t thing-name ?obj))
(202 i 10 (a ?m monkey-location ?v1348))
(203 i 7 (f ?v1348 != ?place))
(204 x nil (f true not (#'rete.core/exist ?x goal-is-to-action walk-to goal-is-to-argument1 ?place)) walk-to-place-to-climb 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action walk-to goal-is-to-argument1 ?place)))
(205 e 23 (a ?g goal-is-to-action on) drop-to-climb)
(206 i 1 (a ?g goal-is-to-argument1 ?obj))
(207 i 11 (a ?t thing-location ?place))
(208 i 2 (a ?t thing-name ?obj))
(209 i 10 (a ?m monkey-location ?place))
(210 i 6 (a ?m monkey-holding ?v1349))
(211 i 27 (f ?v1349 != blank))
(212 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 blank)) drop-to-climb 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 blank)))
(213 e 23 (a ?g goal-is-to-action on) climb-indirectly)
(214 i 1 (a ?g goal-is-to-argument1 ?obj))
(215 i 11 (a ?t thing-location ?place))
(216 i 2 (a ?t thing-name ?obj))
(217 i 4 (a ?t thing-on-top-of ?on))
(218 i 10 (a ?m monkey-location ?place))
(219 i 25 (a ?m monkey-holding blank))
(220 i 9 (a ?m monkey-on-top-of ?on2))
(221 i 7 (f ?on2 != ?on))
(222 i 7 (f ?on2 != ?obj))
(223 x nil (f true not (#'rete.core/exist ?x goal-is-to-action on goal-is-to-argument1 ?on)) climb-indirectly 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action on goal-is-to-argument1 ?on)))
(224 e 23 (a ?goal goal-is-to-action on) climb-directly)
(225 i 1 (a ?goal goal-is-to-argument1 ?obj))
(226 i 11 (a ?t thing-location ?place))
(227 i 2 (a ?t thing-name ?obj))
(228 i 4 (a ?t thing-on-top-of ?on))
(229 i 9 (a ?monkey monkey-on-top-of ?on))
(230 i 25 (a ?monkey monkey-holding blank))
(231 x 10 (a ?monkey monkey-location ?place) climb-directly 0 ((#'clojure.core/println (#'clojure.core/str "Monkey climbs onto the " ?obj ".")) (#'rete.core/retract ?monkey monkey-on-top-of ?on) (#'rete.core/asser ?monkey monkey-on-top-of ?obj) (#'rete.core/retract ?goal goal-is-to-action on goal-is-to-argument1 ?obj)))
(232 e 23 (a ?goal goal-is-to-action on) already-on-object)
(233 i 1 (a ?goal goal-is-to-argument1 ?obj))
(234 x 9 (a ?m monkey-on-top-of ?obj) already-on-object 0 ((#'rete.core/retract ?goal goal-is-to-action on goal-is-to-argument1 ?obj)))
(235 e 31 (a ?g goal-is-to-action eat) hold-to-eat)
(236 i 1 (a ?g goal-is-to-argument1 ?obj))
(237 i 6 (a ?m monkey-holding ?v1350))
(238 i 7 (f ?v1350 != ?obj))
(239 x nil (f true not (#'rete.core/exist ?x goal-is-to-action hold goal-is-to-argument1 ?obj)) hold-to-eat 0 ((#'rete.core/asser (#'clojure.core/gensym "goal-is-to") goal-is-to-action hold goal-is-to-argument1 ?obj)))
(240 e 31 (a ?goal goal-is-to-action eat) satisfy-hunger)
(241 i 1 (a ?goal goal-is-to-argument1 ?name))
(242 i 6 (a ?monkey monkey-holding ?name))
(243 x 2 (a ?thing thing-name ?name) satisfy-hunger 0 ((#'clojure.core/println (#'clojure.core/str "Monkey eats the " ?name ".")) (#'rete.core/retract ?monkey monkey-holding ?name) (#'rete.core/asser ?monkey monkey-holding blank) (#'rete.core/retract ?goal goal-is-to-action eat goal-is-to-argument1 ?name) (#'rete.core/retract ?thing thing-name ?name)))
